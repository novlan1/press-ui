const { replaceAllPolyfill } = require('t-comm');
const fs = require('fs');
const path = require('path');
const glob = require('glob');
const GLOB_MATCH = path.resolve(__dirname, '../../src/packages/press-*/press-*.vue');
const SCSS_PATH = path.resolve(__dirname, '../../src/index.scss');

replaceAllPolyfill();

const MAIN_TEMPLATE = `/* Automatically generated by './script/component-config/generate-entry.js' */
{{install}}

const components = {
  {{components}}
};

const install = function (Vue) {
  Object.values(components).forEach((component) => {
    Vue.component(component.name, component);
  });
};

if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  install,
  ...components,
};
export * from './packages/common/public/public';
`;
const CSS_BASE = `@import "./packages/common/style/press/index.scss";
@import "./packages/common/style/press/var.scss";

`;


function getAllPressComponents() {
  const list = glob.sync(GLOB_MATCH);
  const filterReg = /^(act|schedule|hor|message-|datetime-picker-popup|ui|award-popup-hor|area-popup|teleport-web|icon-music)/;
  const compList = list.map((item) => {
    const list = item.split('/');
    const file = list[list.length - 1];
    const componentName = file.replace(/^press-/, '').replace(/\.vue$/, '');

    return {
      dir: path.dirname(item),
      name: componentName,
      componentName: componentName.replace(/(?:^|-)(\w)/g,  (_, c) => (c ? c.toUpperCase() : '')),
    };
  }).filter(item => !filterReg.test(item.name));

  const componentNameList = compList.map(item => item.componentName);
  const importList = compList.map(item => `import ${item.componentName} from './packages/press-${item.name}/press-${item.name}.vue';`);

  return {
    compList,
    importList,
    componentNameList,
  };
}


function hyphenate(str) {
  const hyphenateRE = /\B([A-Z])/g;
  return str.replace(hyphenateRE, '-$1').toLowerCase();
}

function generateIndexScss() {
  const { compList } = getAllPressComponents();
  const result = [];
  const targetDir = path.resolve(__dirname, '../../src');

  for (const comp of compList) {
    const globMatch = `${comp.dir}/css/*`;
    const list = glob.sync(globMatch);

    result.push(...list.map((item) => {
      let relativePath = path.relative(targetDir, item);
      if (process.platform === 'win32') {
        relativePath = relativePath.replace(/\\/g, '/');
      }

      const str = `@import "./${relativePath}";`;
      return str;
    }));
  }

  const resultStr = `${CSS_BASE}${result.join('\n')}`;

  fs.writeFileSync(SCSS_PATH, resultStr, {
    encoding: 'utf-8',
  });
}


function getComponentPath(component) {
  const SPECIAL_COMPONENT_MAP = {
    'message-board': 'message-board-list',
  };
  return SPECIAL_COMPONENT_MAP[component] || component;
}

function getCompList(componentConfig) {
  const importList = [];
  const componentNameList = [];

  Object.keys(componentConfig)
    .forEach((key) => {
      const value = componentConfig[key];
      const { list } = value;


      list.forEach((item) => {
        const hyphenatedName = hyphenate(item.name);
        const shortName = item.name.replace(/$Press/, '');
        const compPath = getComponentPath(hyphenatedName);
        importList.push(`import ${shortName} from './packages/press-${hyphenatedName}/press-${compPath}.vue';`);

        componentNameList.push(shortName);
      });
    });
  return {
    importList,
    componentNameList,
  };
}

function getSrcIndexJs(componentConfig, allComponent = false) {
  let {
    importList,
    componentNameList,
  } = getCompList(componentConfig);

  if (allComponent) {
    const info = getAllPressComponents();
    importList = info.importList;
    componentNameList = info.componentNameList;
  }

  const res = MAIN_TEMPLATE
    .replace('{{install}}', importList.join('\n'))
    .replaceAll('{{components}}', componentNameList.map(item => `${item},`).join('\n  '));

  return res;
}


function writeSrcIndexJs(componentConfig, filePath, allComponent = false) {
  const js = getSrcIndexJs(componentConfig, allComponent);
  fs.writeFileSync(filePath, js, {
    encoding: 'utf-8',
  });
  generateIndexScss();
}


module.exports = {
  hyphenate,
  getComponentPath,
  writeSrcIndexJs,
};
